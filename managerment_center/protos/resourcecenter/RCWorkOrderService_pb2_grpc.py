# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import RCCommon_pb2 as RCCommon__pb2
import RCWorkOrderService_pb2 as RCWorkOrderService__pb2


class RCWorkOrderServiceStub(object):
  """工单
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.listWorkOrder = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/listWorkOrder',
        request_serializer=RCWorkOrderService__pb2.RequestWorkOrder.SerializeToString,
        response_deserializer=RCWorkOrderService__pb2.ReponseListWorkOrder.FromString,
        )
    self.listWorkOrderDetail = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/listWorkOrderDetail',
        request_serializer=RCWorkOrderService__pb2.RequestWorkOrderDetail.SerializeToString,
        response_deserializer=RCWorkOrderService__pb2.ReponseListWorkOrderDetail.FromString,
        )
    self.editWorkOrder = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/editWorkOrder',
        request_serializer=RCWorkOrderService__pb2.RequestEditWorkOrder.SerializeToString,
        response_deserializer=RCCommon__pb2.SingleResp.FromString,
        )
    self.saveWorkOrder = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/saveWorkOrder',
        request_serializer=RCWorkOrderService__pb2.RequestWorkOrderSaveOrUpdate.SerializeToString,
        response_deserializer=RCCommon__pb2.EmptyResp.FromString,
        )
    self.updateWorkOrder = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/updateWorkOrder',
        request_serializer=RCWorkOrderService__pb2.RequestWorkOrderSaveOrUpdate.SerializeToString,
        response_deserializer=RCCommon__pb2.EmptyResp.FromString,
        )
    self.deleteWorkOrder = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/deleteWorkOrder',
        request_serializer=RCWorkOrderService__pb2.RequestDeleteWorkOrder.SerializeToString,
        response_deserializer=RCCommon__pb2.EmptyResp.FromString,
        )
    self.mateWorkOrder = channel.unary_unary(
        '/resourcecenter.RCWorkOrderService/mateWorkOrder',
        request_serializer=RCWorkOrderService__pb2.RequestMateWorkOrder.SerializeToString,
        response_deserializer=RCWorkOrderService__pb2.ResponseMateWorkOrder.FromString,
        )


class RCWorkOrderServiceServicer(object):
  """工单
  """

  def listWorkOrder(self, request, context):
    """工单查询
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listWorkOrderDetail(self, request, context):
    """工单详情信息查询
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def editWorkOrder(self, request, context):
    """工单编辑
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def saveWorkOrder(self, request, context):
    """工单新增
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateWorkOrder(self, request, context):
    """工单更新
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def deleteWorkOrder(self, request, context):
    """工单删除
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def mateWorkOrder(self, request, context):
    """版本章节匹配
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RCWorkOrderServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'listWorkOrder': grpc.unary_unary_rpc_method_handler(
          servicer.listWorkOrder,
          request_deserializer=RCWorkOrderService__pb2.RequestWorkOrder.FromString,
          response_serializer=RCWorkOrderService__pb2.ReponseListWorkOrder.SerializeToString,
      ),
      'listWorkOrderDetail': grpc.unary_unary_rpc_method_handler(
          servicer.listWorkOrderDetail,
          request_deserializer=RCWorkOrderService__pb2.RequestWorkOrderDetail.FromString,
          response_serializer=RCWorkOrderService__pb2.ReponseListWorkOrderDetail.SerializeToString,
      ),
      'editWorkOrder': grpc.unary_unary_rpc_method_handler(
          servicer.editWorkOrder,
          request_deserializer=RCWorkOrderService__pb2.RequestEditWorkOrder.FromString,
          response_serializer=RCCommon__pb2.SingleResp.SerializeToString,
      ),
      'saveWorkOrder': grpc.unary_unary_rpc_method_handler(
          servicer.saveWorkOrder,
          request_deserializer=RCWorkOrderService__pb2.RequestWorkOrderSaveOrUpdate.FromString,
          response_serializer=RCCommon__pb2.EmptyResp.SerializeToString,
      ),
      'updateWorkOrder': grpc.unary_unary_rpc_method_handler(
          servicer.updateWorkOrder,
          request_deserializer=RCWorkOrderService__pb2.RequestWorkOrderSaveOrUpdate.FromString,
          response_serializer=RCCommon__pb2.EmptyResp.SerializeToString,
      ),
      'deleteWorkOrder': grpc.unary_unary_rpc_method_handler(
          servicer.deleteWorkOrder,
          request_deserializer=RCWorkOrderService__pb2.RequestDeleteWorkOrder.FromString,
          response_serializer=RCCommon__pb2.EmptyResp.SerializeToString,
      ),
      'mateWorkOrder': grpc.unary_unary_rpc_method_handler(
          servicer.mateWorkOrder,
          request_deserializer=RCWorkOrderService__pb2.RequestMateWorkOrder.FromString,
          response_serializer=RCWorkOrderService__pb2.ResponseMateWorkOrder.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'resourcecenter.RCWorkOrderService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
